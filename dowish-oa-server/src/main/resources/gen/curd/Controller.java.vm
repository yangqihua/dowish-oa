package ${package}.controller;

import java.util.List;
import java.util.Map;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import net.dowish.common.utils.Apis;
import net.dowish.common.utils.Page;
import net.dowish.common.utils.Query;
import net.dowish.common.security.validator.ValidatorUtils;

import ${package}.entity.${className}Entity;
import ${package}.service.${className}Service;

/**
 * ${comments} Controller
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@RestController
@RequestMapping("/${pathName}")
public class ${className}Controller {
	@Autowired
	private ${className}Service ${classname}Service;

	/**
	 * ${comments} 列表
	 *
	 * @param map 至少包含了分页参数page、limit，可附加 ${className} 的属性作为查询条件.
	 * ${className} 的属性包括：
		#foreach ($column in $columns)
		 * $column.comments ：$column.javaType $column.javaField
		#end
	 *
	 * @return 包含了 ${comments} 的分页列表
	 */
	@GetMapping("/list")
	public Apis list(@RequestParam Map<String, Object> params){
		//查询列表数据
		Query query = new Query(params);
		List<${className}Entity> ${classname}List = ${classname}Service.queryList(query);
		int total = ${classname}Service.queryTotal(query);
		Page page = new Page(${classname}List, total, query.getLimit(), query.getPage());
		return Apis.ok() .put("page", page);
	}


	/**
	 * ${comments} 详情
	 */
	@GetMapping("/info/{${pk.javaField}}")
	public Apis info(@PathVariable("${pk.javaField}") ${pk.javaType} ${pk.javaField}){
			${className}Entity ${classname} = ${classname}Service.queryObject(${pk.javaField});
		return Apis.ok() .put("${classname}", ${classname});
	}

	/**
	 * ${comments} 保存
	 */
	@PostMapping("/save")
	public Apis save(@RequestBody ${className}Entity ${classname}){
		ValidatorUtils.validateEntity(${classname});
			${classname}Service.save(${classname});
		return Apis.ok() ;
	}

	/**
	 * ${comments} 修改
	 */
	@PostMapping("/update")
	public Apis update(@RequestBody ${className}Entity ${classname}){
		ValidatorUtils.validateEntity(${classname});
			${classname}Service.update(${classname});
		return Apis.ok() ;
	}

	/**
	 * ${comments} 删除
	 */
	@PostMapping("/delete")
	public Apis delete(@RequestBody ${pk.javaType}[] ${pk.javaField}s){
			${classname}Service.deleteBatch(${pk.javaField}s);
		return Apis.ok() ;
	}

}